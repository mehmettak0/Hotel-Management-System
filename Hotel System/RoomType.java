/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hotel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emin yasir corut
 */
public class RoomType extends javax.swing.JFrame {

    int idSelected;
    Database db = new Database();//I have included another class  to connect to the database.
    DefaultTableModel tbl_Room_TypeModel;// I created DefaultTableModel to retrieve the data from the RoomType database.

    /**
     * Creates new form RoomType
     */
    public RoomType() {
        initComponents();

        tbl_Room_TypeModel = db.GetRoomType();//I get RoomType data from the database class.

        tbl_roomType.setModel(tbl_Room_TypeModel);//I'm transferring the data to the RoomType table.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_roomType = new javax.swing.JTable();
        btn_back = new javax.swing.JButton();
        btn_roomTypeAdd = new javax.swing.JButton();
        btn_roomType_Update = new javax.swing.JButton();
        btn_roomType_delete = new javax.swing.JButton();
        spnnr_KidsCount = new javax.swing.JSpinner();
        spnnr_adultsCount = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        lst_roomName = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Room Type");
        setLocation(new java.awt.Point(330, 85));
        setMaximumSize(new java.awt.Dimension(970, 710));
        setMinimumSize(new java.awt.Dimension(970, 710));
        setPreferredSize(new java.awt.Dimension(970, 710));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel1.setText("Room Name");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        tbl_roomType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbl_roomType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_roomTypeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_roomType);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 872, 341));

        btn_back.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\back.png")); // NOI18N
        btn_back.setText("BACK");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });
        getContentPane().add(btn_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(781, 634, 113, 31));

        btn_roomTypeAdd.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\follow.png")); // NOI18N
        btn_roomTypeAdd.setText("Add");
        btn_roomTypeAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_roomTypeAddActionPerformed(evt);
            }
        });
        getContentPane().add(btn_roomTypeAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 220, 120, 39));

        btn_roomType_Update.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\sync-512.png")); // NOI18N
        btn_roomType_Update.setText("Update");
        btn_roomType_Update.setEnabled(false);
        btn_roomType_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_roomType_UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_roomType_Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 220, 104, 39));

        btn_roomType_delete.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\x-button.png")); // NOI18N
        btn_roomType_delete.setText("Delete");
        btn_roomType_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_roomType_deleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_roomType_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 220, 100, 40));

        spnnr_KidsCount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 15, 1));
        getContentPane().add(spnnr_KidsCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 100, 60, 30));

        spnnr_adultsCount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 15, 1));
        getContentPane().add(spnnr_adultsCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 40, 60, 30));

        lst_roomName.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        lst_roomName.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Junior Suite", "Doublex Room", "Studio Room", "Connecting Room", "Family Room", "Corner Room", "Handicapped Room", "Presidental Room" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lst_roomName.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lst_roomName.setToolTipText("");
        lst_roomName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(lst_roomName);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 130, 190));

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel2.setText("Adults Count ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel3.setText("Kids Count");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, -1, -1));

        jLabel4.setText("=");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 20, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\customer_background.jpg")); // NOI18N
        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -6, 950, 680));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_roomTypeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_roomTypeAddActionPerformed
        // TODO add your handling code here:

        //I checked to see if they were all empty. and then I made it mandatory that those entered using Regex be under a certain condition.
        if (lst_roomName.getSelectedValue().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please choose room type");
            return;
        }
        if ((int) spnnr_adultsCount.getValue() == 0 && (int) spnnr_KidsCount.getValue() == 0) {
            JOptionPane.showMessageDialog(this, "Please define person count");
            return;
        }

        // after checking the accuracy of the entered data, I pulled the data from the screen by Type.
        String room_type = lst_roomName.getSelectedValue();
        int adults_count = (int) spnnr_adultsCount.getValue();
        int kids_count = (int) spnnr_KidsCount.getValue();

        //goes to the insert RoomType function.    
        InsertReservation(room_type, adults_count, kids_count);

        //I pulled the data and projected it into the table.
        tbl_Room_TypeModel = db.GetRoomType();
        tbl_roomType.setModel(tbl_Room_TypeModel);

        Clear();// goes to the cleaning function to delete the entered data after the end of the transaction
    }//GEN-LAST:event_btn_roomTypeAddActionPerformed

    private void btn_roomType_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_roomType_UpdateActionPerformed
        // TODO add your handling code here:

        Update();//goes to the function for update.
        btn_roomType_Update.setEnabled(false);

        Clear();// goes to the cleaning function to delete the entered data after the end of the transaction
    }//GEN-LAST:event_btn_roomType_UpdateActionPerformed

    private void btn_roomType_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_roomType_deleteActionPerformed
        // TODO add your handling code here:

        int row = tbl_roomType.getSelectedRow();//I GOT THE SELECTED LINE
        int id = (int) tbl_roomType.getValueAt(row, 0);//I get the ID of the roomType

        Delete(id);//going to the function for deletion

        //I pulled the data and projected it into the table.
        tbl_Room_TypeModel = db.GetRoomType();
        tbl_roomType.setModel(tbl_Room_TypeModel);
    }//GEN-LAST:event_btn_roomType_deleteActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        // TODO add your handling code here:
        this.dispose();// closes RoomType page , opens Main page
        new Main().setVisible(true);
    }//GEN-LAST:event_btn_backActionPerformed

    private void tbl_roomTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_roomTypeMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {// the process of selecting rows from a table with the mouse
            if (tbl_roomType.getSelectedRow() > -1) {
                // I get the ID of the RoomType in the selected line
                int row = tbl_roomType.getSelectedRow();
                idSelected = (int) tbl_Room_TypeModel.getValueAt(row, 0);

                GetDataWihtId(idSelected);// going to the GetDataWithId function to print information from the selected line to textboxes.
                btn_roomType_Update.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tbl_roomTypeMouseClicked

    public boolean InsertReservation(String room_type, int adults_count, int kids_count) {
        boolean rvalue = false;
        Connection conn = null;
        try {
            // connect to the database
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password.
            Statement stmt = conn.createStatement();//javasql.statment ı seçtik
            String query = "SELECT ROOM_TYPE_ID FROM ROOM_TYPE ORDER BY ROOM_TYPE_ID DESC";///AUTOMATIC ID COUNT RETRIEVAL PROCESS
            ResultSet rs = stmt.executeQuery(query);///AUTOMATIC ID COUNT RETRIEVAL PROCESS
            rs.next();//First element in the table.
            int id = rs.getInt(1) + 1;
            //part of adding incoming information to the database
            query = "INSERT INTO ROOM_TYPE VALUES(" + id + ",'" + room_type + "'," + adults_count + "," + kids_count + ")";
            stmt.executeUpdate(query);
            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !conn.isClosed()) {

                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }

        return rvalue;
    }

    public boolean Delete(int id) {
        //delete the roomType from the database according to the incoming id
        boolean rvalue = false;
        Connection conn = null;
        try {
            // connect to the database
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password.
            Statement stmt = conn.createStatement();
            String query = "DELETE FROM ROOM_TYPE WHERE ROOM_TYPE_ID=" + id;//roomType selection section according to id

            stmt.executeUpdate(query);
            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    public void Clear() {
        //clears all data from the screen when finished processing
        spnnr_KidsCount.setValue(0);
        spnnr_adultsCount.setValue(0);
        lst_roomName.setSelectedIndex(-1);

    }

    public void GetDataWihtId(int id) {//I reflect the table according to the id of the selected row.

        tbl_Room_TypeModel.setRowCount(0);
        try {
            // connect to the database
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password.
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM ROOM_TYPE WHERE ROOM_TYPE_ID=" + id;// according to the incoming id, I get the room from the database
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                // after identifying the roomType, I pull their information according to their type. then I print their information on the screen
                String Room_name = rs.getString("ROOM_NAME");
                int AdultsCount = rs.getInt("ADULTS_COUNT");
                int KidsCount = rs.getInt("KIDS_COUNT");
                int index = 0;
                for (int i = 0; i < lst_roomName.getModel().getSize(); i++) {
                    if (lst_roomName.getModel().getElementAt(i).equals(Room_name)) {
                        index = i;
                    }
                }

                spnnr_KidsCount.setValue(KidsCount);
                spnnr_adultsCount.setValue(AdultsCount);
                lst_roomName.setSelectedIndex(index);
            }
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //updating the table
        tbl_Room_TypeModel = db.GetRoomType();
        tbl_roomType.setModel(tbl_Room_TypeModel);
    }

    public void Update() {

        try {
            //I get the changed information. 
            String room_type = lst_roomName.getSelectedValue();
            int adults_count = (int) spnnr_adultsCount.getValue();
            int kids_count = (int) spnnr_KidsCount.getValue();

            // I update the RoomType's database information on the selected row along with the changed information
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/USerDB", "sa", "as");//I enter the database location and add the username and password.
            Statement stmt = conn.createStatement();
            String query = "UPDATE ROOM_TYPE SET ROOM_NAME='" + room_type + "',ADULTS_COUNT=" + adults_count + ",KIDS_COUNT=" + kids_count + " WHERE ROOM_TYPE_ID=" + idSelected;
            stmt.executeUpdate(query);
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //updating the table
        tbl_Room_TypeModel = db.GetRoomType();
        tbl_roomType.setModel(tbl_Room_TypeModel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomType().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_roomTypeAdd;
    private javax.swing.JButton btn_roomType_Update;
    private javax.swing.JButton btn_roomType_delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lst_roomName;
    private javax.swing.JSpinner spnnr_KidsCount;
    private javax.swing.JSpinner spnnr_adultsCount;
    private javax.swing.JTable tbl_roomType;
    // End of variables declaration//GEN-END:variables
}
