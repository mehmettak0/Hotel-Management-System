/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hotel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emin yasir corut
 */
public class Manager extends javax.swing.JFrame {

    int idSelected;
    Database db = new Database();//I have included another class  to connect to the database.
    DefaultTableModel tbl_RolesModel;// I created DefaultTableModel to retrieve the data from the Role database.
    DefaultTableModel tbl_usersModel;//I created DefaultTableModel to retrieve the data from the User database.
    String getPassword = "";//for the Equality State of passwords
    String getPassword2 = "";

    /**
     * Creates new form User
     */
    public Manager() {
        initComponents();

        tbl_RolesModel = db.GetRoles();//I get Role data from the database class.
        tbl_usersModel = db.GetUser();//I get User data from the database class.

        for (int i = 0; i < tbl_RolesModel.getRowCount(); i++) {  //I transfer the data I get from the database to fill the inside of the ComboBox with roles
            cbRole.addItem((String) tbl_RolesModel.getValueAt(i, 1));
        }

        tbl_User.setModel(tbl_usersModel);//I'm transferring the data to the manager table.

        //closing the appearance of labels to show errors arising from regex controls
        lbl_name.setVisible(false);
        lbl_surname.setVisible(false);
        lbl_password.setVisible(false);
        lbl_username.setVisible(false);
        lbl_email.setVisible(false);
        lbl_phone.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_User = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txt_surname = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_email = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_phone = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_password = new javax.swing.JPasswordField();
        btn_Useradd = new javax.swing.JButton();
        cbRole = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txt_password2 = new javax.swing.JPasswordField();
        jLabel10 = new javax.swing.JLabel();
        txt_UserName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txt_searchbox = new javax.swing.JTextField();
        btn_Userdelete = new javax.swing.JButton();
        btn_Userupdate = new javax.swing.JButton();
        btn_back_toMain = new javax.swing.JButton();
        lbl_name = new javax.swing.JLabel();
        lbl_surname = new javax.swing.JLabel();
        lbl_password = new javax.swing.JLabel();
        lbl_username = new javax.swing.JLabel();
        lbl_email = new javax.swing.JLabel();
        lbl_phone = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Royal Hotel User Page");
        setBackground(new java.awt.Color(0, 0, 204));
        setLocation(new java.awt.Point(330, 85));
        setMinimumSize(new java.awt.Dimension(1030, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel2.setText("Role");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 13, -1, -1));
        jLabel2.getAccessibleContext().setAccessibleName("lblRole");

        getContentPane().add(txt_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 11, 321, -1));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel3.setText("Name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 13, -1, -1));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tbl_User.setDragEnabled(true);
        tbl_User.setOpaque(false);
        tbl_User.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_UserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_User);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 984, 330));

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel5.setText("Surname");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 44, -1, -1));
        getContentPane().add(txt_surname, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 321, -1));

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel6.setText("Email");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 73, -1, -1));
        getContentPane().add(txt_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 80, 330, -1));

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel7.setText("Phone");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 106, -1, -1));

        try {
            txt_phone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("+##-###-###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        getContentPane().add(txt_phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 330, -1));

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel8.setText("Password");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        txt_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_passwordActionPerformed(evt);
            }
        });
        getContentPane().add(txt_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 321, -1));

        btn_Useradd.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\follow.png")); // NOI18N
        btn_Useradd.setText("Add");
        btn_Useradd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UseraddActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Useradd, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 170, 128, 39));

        getContentPane().add(cbRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 330, -1));

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel9.setText("Password (Again)");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));
        getContentPane().add(txt_password2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 318, -1));

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel10.setText("User Name");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 44, -1, -1));
        getContentPane().add(txt_UserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 40, 330, -1));

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel11.setText("Search Name");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 170, -1, -1));

        txt_searchbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchboxActionPerformed(evt);
            }
        });
        txt_searchbox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchboxKeyReleased(evt);
            }
        });
        getContentPane().add(txt_searchbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 168, 225, -1));

        btn_Userdelete.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\x-button.png")); // NOI18N
        btn_Userdelete.setText("Delete");
        btn_Userdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UserdeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Userdelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 170, 128, 39));

        btn_Userupdate.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\sync-512.png")); // NOI18N
        btn_Userupdate.setText("Update");
        btn_Userupdate.setEnabled(false);
        btn_Userupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UserupdateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Userupdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 170, 128, 39));

        btn_back_toMain.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\back.png")); // NOI18N
        btn_back_toMain.setText("BACK");
        btn_back_toMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_back_toMainActionPerformed(evt);
            }
        });
        getContentPane().add(btn_back_toMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 560, 100, 30));
        getContentPane().add(lbl_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 320, -1));
        getContentPane().add(lbl_surname, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 320, -1));
        getContentPane().add(lbl_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 320, -1));
        getContentPane().add(lbl_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, 320, -1));
        getContentPane().add(lbl_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 100, 330, -1));
        getContentPane().add(lbl_phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 140, 330, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\pexels-jacek-jan-skorupski-7580715.jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_UseraddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UseraddActionPerformed
        // TODO add your handling code here:

        //at first, I checked to see if they were all empty. and then I made it mandatory that those entered using Regex be under a certain condition.
        // if the data entered is not like the desired condition, errors are written in the labels.
        if (txt_name.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^([A-Z][a-z]+([ ]?[a-z]?['-]?[A-Z][a-z]+)*)$").matcher(txt_name.getText());//
            if (!matcher.find()) {
                lbl_name.setText("Name Must Be Least 3 Character,Most 16 Character and No Number");
                lbl_name.setVisible(true);
                return;
            } else {
                lbl_name.setVisible(false);
            }
        }
        if (txt_surname.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^[a-zA-Z_]{3,16}$").matcher(txt_surname.getText());//
            if (!matcher.find()) {
                lbl_surname.setText("Surname Must Be Least 3 Character,Most 16 Character and No Number");
                lbl_surname.setVisible(true);
                return;
            } else {
                lbl_surname.setVisible(false);
            }
        }
        if (txt_password.getPassword().length == 0) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$").matcher(txt_password.getText());
            if (!matcher.find()) {
                lbl_password.setText("Password Must Be Like asAfasdf5");
                lbl_password.setVisible(true);
                return;
            } else {
                lbl_password.setVisible(false);
            }
        }
        if (txt_UserName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^[a-zA-Z0-9_]{3,16}$").matcher(txt_UserName.getText());//
            if (!matcher.find()) {
                lbl_username.setText("Username Must Be Least 3 Character,Most 16 Character");
                lbl_username.setVisible(true);
                return;
            } else {
                lbl_username.setVisible(false);
            }
        }
        if (txt_email.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^([\\w][\\w\\d]+)@(gmail|hotmail)(.com)$").matcher(txt_email.getText());//
            if (!matcher.find()) {
                lbl_email.setText("Email Must Be Like hasan58@gmail.com");
                lbl_email.setVisible(true);
                return;
            } else {
                lbl_email.setVisible(false);
            }
        }
        if (txt_phone.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$").matcher(txt_phone.getText());//
            if (!matcher.find()) {
                lbl_phone.setText("Phone Must Be Like +06-539-555-2933");
                lbl_phone.setVisible(true);
                return;
            } else {
                lbl_phone.setVisible(false);
            }
        }

        //I checked if the passwords were the same
        for (int j = 0; j < txt_password.getPassword().length; j++) {
            getPassword += txt_password.getText().charAt(j);
        }
        for (int j = 0; j < txt_password2.getPassword().length; j++) {
            getPassword2 += txt_password2.getText().charAt(j);
        }
        if (!getPassword.equals(getPassword2)) { //if the password is incorrect, I gave an error with Joptionpane
            JOptionPane.showMessageDialog(this, "Girilen parolalar aynı olmalıdır");
            return;
        }

        // after checking the accuracy of the entered data, I pulled the data by type.
        String name = txt_name.getText();
        String surname = txt_surname.getText();
        String userName = txt_UserName.getText();
        String email = txt_email.getText();
        String phone = txt_phone.getText();
        String password = txt_password.getPassword().toString();
        //getting data in a combo box
        int selectedroleId = 0;
        String selectedroleName = cbRole.getSelectedItem().toString();
        for (int i = 0; i < tbl_RolesModel.getRowCount(); i++) {
            if (tbl_RolesModel.getValueAt(i, 1) == selectedroleName) {//I checked by role names and pulled the information
                selectedroleId = (int) tbl_RolesModel.getValueAt(i, 0);
            }
        }
        InsertUser(selectedroleId, name, surname, userName, email, phone, password);//goes to the insert User function.
        //I pulled the data and projected it into the table.
        tbl_usersModel = db.GetUser();
        tbl_User.setModel(tbl_usersModel);
        Clear(); // goes to the cleaning function to delete the entered data after the end of the transaction


    }//GEN-LAST:event_btn_UseraddActionPerformed

    private void btn_UserdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UserdeleteActionPerformed
        // TODO add your handling code here:

        int row = tbl_User.getSelectedRow();//I GOT THE SELECTED LINE
        int id = (int) tbl_User.getValueAt(row, 0);//I get the ID of the user
        Delete(id); //going to the function for deletion
        //I pulled the data and projected it into the table.
        tbl_usersModel = db.GetUser();
        tbl_User.setModel(tbl_usersModel);

    }//GEN-LAST:event_btn_UserdeleteActionPerformed

    private void btn_UserupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UserupdateActionPerformed
        // TODO add your handling code here:
        Update();//going to the function for update.
        btn_Userupdate.setEnabled(false);
        Clear();//goes to the cleaning function to delete the entered data after the end of the transaction

    }//GEN-LAST:event_btn_UserupdateActionPerformed

    private void tbl_UserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_UserMouseClicked
        // TODO add your handling code here:

        if (SwingUtilities.isRightMouseButton(evt)) {// the process of selecting rows from a table with the mouse
            if (tbl_User.getSelectedRow() > -1) {
                // I get the ID of the user in the selected line
                int row = tbl_User.getSelectedRow();
                idSelected = (int) tbl_usersModel.getValueAt(row, 0);

                GetDataWihtId(idSelected); // going to the GetDataWithId function to print information from the selected line to textboxes
                btn_Userupdate.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tbl_UserMouseClicked

    private void txt_searchboxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchboxKeyReleased
        // TODO add your handling code here:
        //according to the input entered, the person matching the database is reflected in the table.
        String text = txt_searchbox.getText();
        //goes to the database class for the match operation in the database.
        tbl_usersModel = db.GetUserBySearchText(text);//goes to the database class for the match operation in the database.
        tbl_User.setModel(tbl_usersModel);


    }//GEN-LAST:event_txt_searchboxKeyReleased

    private void btn_back_toMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_back_toMainActionPerformed
        // TODO add your handling code here:
        this.dispose(); // closes Manager pade , opens Main page
        new Main().setVisible(true);
    }//GEN-LAST:event_btn_back_toMainActionPerformed

    private void txt_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_passwordActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
         new Login().setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void txt_searchboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchboxActionPerformed

    public void GetDataWihtId(int id) {//I reflect the table according to the id of the selected row.

        tbl_usersModel.setRowCount(0);//we reset the number of rows so that it does not add on top of the previous information
        try {
            // connect to the database
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM USER1 WHERE USERID=" + id; // according to the incoming id, I get the user from the database
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                // after identifying the user, I pull their information according to their type. then I print their information on the screen
                int roleId = rs.getInt("ROLEID");
                String name = rs.getString("NAME");
                String surname = rs.getString("SURNAME");
                String username = rs.getString("USERNAME");
                String email = rs.getString("EMAİL");
                String password = rs.getString("PASSWORD");
                String phone = rs.getString("PHONE");

                txt_name.setText(name);
                txt_surname.setText(surname);
                txt_UserName.setText(username);
                txt_email.setText(email);
                txt_phone.setText(phone);
                cbRole.setSelectedIndex((int)(tbl_RolesModel.getValueAt(roleId-1, 0))-1);
                //cmbox_room_typeID.setSelectedIndex((int) (tbl_RoomType_id.getValueAt(Room_Type_id - 1, 0)) - 1);
                txt_password.setText(password);
                txt_password2.setText(password);

            }
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //updating the table
        tbl_usersModel = db.GetUser();
        tbl_User.setModel(tbl_usersModel);
    }

    public void Update() {

        try {
            //I get the changed information.
            String name = txt_name.getText();
            String surname = txt_surname.getText();
            String userName = txt_UserName.getText();
            String email = txt_email.getText();
            String phone = txt_phone.getText();
            String password = txt_password.getPassword().toString();
            int selectedroleId = 0;
            String selectedroleName = cbRole.getSelectedItem().toString();
            for (int i = 0; i < tbl_RolesModel.getRowCount(); i++) {
                if (tbl_RolesModel.getValueAt(i, 1) == selectedroleName) {
                    selectedroleId = (int) tbl_RolesModel.getValueAt(i, 0);
                }
            }

            // I update the user's database information on the selected row along with the changed information
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/USerDB", "sa", "as");//I enter the database location and add the username and password
            Statement stmt = conn.createStatement();
            String query = "UPDATE USER1 SET NAME='" + name + "',SURNAME='" + surname + "',USERNAME='" + userName + "', EMAIL='" + email
                    + "', PASSWORD='" + password + "', PHONE='" + phone + "' WHERE USERID=" + idSelected;
            stmt.executeUpdate(query);
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //updating the table
        tbl_usersModel = db.GetUser();
        tbl_User.setModel(tbl_usersModel);
    }

    public boolean InsertUser(int roleId, String name, String surname, String userName, String email, String phone, String password) {
        boolean rvalue = false;
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password.
            Statement stmt = conn.createStatement();//javasql.statment ı seçtik.
            String query = "SELECT USERID FROM USER1 ORDER BY USERID DESC";//AUTOMATIC ID COUNT RETRIEVAL PROCESS            
            ResultSet rs = stmt.executeQuery(query);//AUTOMATIC ID COUNT RETRIEVAL PROCESS
            rs.next();//first element in the table
            int id = rs.getInt(1) + 1;
            //part of adding incoming information to the database
            query = "INSERT INTO USER1 VALUES(" + id + "," + roleId + ",'" + userName + "','" + name + "','" + surname + "','" + email + "','" + phone + "','" + password + "')";
            stmt.executeUpdate(query);
            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !conn.isClosed()) {

                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
        }

        return rvalue;
    }

    public boolean Delete(int id) {
        //delete the user from the database according to the incoming id
        boolean rvalue = false;
        Connection conn = null;
        try {

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password
            Statement stmt = conn.createStatement();
            String query = "DELETE FROM USER1 WHERE USERID=" + id; //user selection section according to id
            stmt.executeUpdate(query);
            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    public void Clear() {
        //clears all data from the screen when finished processing
        txt_UserName.setText("");
        txt_email.setText("");
        txt_name.setText("");
        txt_phone.setText("");
        txt_surname.setText("");
        txt_password.setText("");
        txt_password2.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manager().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Useradd;
    private javax.swing.JButton btn_Userdelete;
    private javax.swing.JButton btn_Userupdate;
    private javax.swing.JButton btn_back_toMain;
    private javax.swing.JComboBox<String> cbRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_password;
    private javax.swing.JLabel lbl_phone;
    private javax.swing.JLabel lbl_surname;
    private javax.swing.JLabel lbl_username;
    private javax.swing.JTable tbl_User;
    private javax.swing.JTextField txt_UserName;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_name;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JPasswordField txt_password2;
    private javax.swing.JFormattedTextField txt_phone;
    private javax.swing.JTextField txt_searchbox;
    private javax.swing.JTextField txt_surname;
    // End of variables declaration//GEN-END:variables
}
