/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hotel;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emin yasir corut
 */
public class Reservation extends javax.swing.JFrame {

    int idSelected;
    Database db = new Database();//I have included another class  to connect to the database.
    DefaultTableModel tbl_ReservationModel;// I created DefaultTableModel to retrieve the data from the Reservation database.
    DefaultTableModel tbl_RoomModel;// I created DefaultTableModel to retrieve the data from the Room database.
    DefaultTableModel tbl_RoomType_id;// I created DefaultTableModel to retrieve the data from the RoomType database.
    DefaultTableModel tbl_CustomerModel;// I created DefaultTableModel to retrieve the data from the Customer database.

    /**
     * Creates new form Reservation
     */
    public Reservation() {
        initComponents();
        tbl_ReservationModel = db.GetReservation();//I get Reservation data from the database class.
        tbl_reservation.setModel(tbl_ReservationModel);//I'm transferring the data to the Reservation table.

        tbl_RoomType_id = db.GetRoomType();//I get RoomType data from the database class.
        tbl_RoomModel = db.GetRoom();//I get Room data from the database class.
        tbl_CustomerModel = db.GetCustomers();//I get Customers data from the database class.

        //closing the appearance of labels to show errors arising from regex controls
        lbl_roomId.setVisible(false);
        lbl_customerId.setVisible(false);
        lbl_departureDate.setVisible(false);
        lbl_arrivalDate.setVisible(false);
        lbl_Price.setVisible(false);

        // import room number, room name, adults count and finally kids count into combobox
        for (int i = 0; i < tbl_RoomModel.getRowCount(); i++) {
            String number = tbl_RoomModel.getValueAt(i, 2) + "";
            String name = (String) tbl_RoomType_id.getValueAt(i, 1) + "";
            String adults_count = (String) (tbl_RoomType_id.getValueAt(i, 2) + "");
            String kids_count = (String) (tbl_RoomType_id.getValueAt(i, 3) + "");

            cmbox_room_number.addItem(number + "-" + name + "-" + adults_count + "-" + kids_count);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_reservation = new javax.swing.JTable();
        btn_Reservationadd = new javax.swing.JButton();
        btn_Reservationupdate = new javax.swing.JButton();
        btn_Reservationdelete = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_departureDate = new javax.swing.JFormattedTextField();
        txt_arrivalDate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_price = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txt_searchbox = new javax.swing.JTextField();
        lbl_roomId = new javax.swing.JLabel();
        lbl_customerId = new javax.swing.JLabel();
        lbl_arrivalDate = new javax.swing.JLabel();
        lbl_departureDate = new javax.swing.JLabel();
        lbl_Price = new javax.swing.JLabel();
        cmbox_room_number = new javax.swing.JComboBox<>();
        txt_customerTC = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Royal Hotel Reservation Page");
        setLocation(new java.awt.Point(330, 85));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbl_reservation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbl_reservation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_reservationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_reservation);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 313, 991, 354));

        btn_Reservationadd.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\follow.png")); // NOI18N
        btn_Reservationadd.setText("Add");
        btn_Reservationadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ReservationaddActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Reservationadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 267, 110, 35));

        btn_Reservationupdate.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\sync-512.png")); // NOI18N
        btn_Reservationupdate.setText("Update");
        btn_Reservationupdate.setEnabled(false);
        btn_Reservationupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ReservationupdateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Reservationupdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(806, 267, 95, 35));

        btn_Reservationdelete.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\x-button.png")); // NOI18N
        btn_Reservationdelete.setText("Delete");
        btn_Reservationdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ReservationdeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Reservationdelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(907, 267, 94, 35));

        btn_back.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\back.png")); // NOI18N
        btn_back.setText("BACK");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });
        getContentPane().add(btn_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(887, 685, 93, 26));

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel2.setText("Room Number");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel3.setText("Customer TC");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        try {
            txt_departureDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        getContentPane().add(txt_departureDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 80, 200, -1));

        try {
            txt_arrivalDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        getContentPane().add(txt_arrivalDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 30, 200, -1));

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel4.setText("Arrival DATE");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel5.setText("Departure DATE");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel6.setText("Price");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, -1, -1));
        getContentPane().add(txt_price, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 130, 200, -1));

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel11.setText("Search Room ID");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, -1, -1));

        txt_searchbox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchboxKeyReleased(evt);
            }
        });
        getContentPane().add(txt_searchbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 225, -1));
        getContentPane().add(lbl_roomId, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 200, -1));
        getContentPane().add(lbl_customerId, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 210, -1));
        getContentPane().add(lbl_arrivalDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 60, 260, -1));
        getContentPane().add(lbl_departureDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 110, 250, -1));
        getContentPane().add(lbl_Price, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 160, 200, -1));

        getContentPane().add(cmbox_room_number, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 210, -1));
        getContentPane().add(txt_customerTC, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 210, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon("C:\\Users\\emin yasir corut\\Desktop\\HOTEL-Proje\\customer_background.jpg")); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -6, 1010, 730));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchboxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchboxKeyReleased
        // TODO add your handling code here:

        //according to the input entered, the room matching the database is reflected in the table.
        if (!txt_searchbox.getText().equals("")) {
            int text = Integer.parseInt(txt_searchbox.getText());
            //goes to the database class for the match operation in the database.
            tbl_ReservationModel = db.GetReservationBySearchText(text);
            tbl_reservation.setModel(tbl_ReservationModel);// and projected it into the reservation table.
        } else {
            tbl_ReservationModel = db.GetReservation();
            tbl_reservation.setModel(tbl_ReservationModel);
            return;
        }

    }//GEN-LAST:event_txt_searchboxKeyReleased

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        // TODO add your handling code here:
        this.dispose();// closes Reservation page , opens Main page
        new Main().setVisible(true);
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_ReservationdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ReservationdeleteActionPerformed
        // TODO add your handling code here:
        int row = tbl_reservation.getSelectedRow();//I GOT THE SELECTED LINE
        int id = (int) tbl_reservation.getValueAt(row, 0);//I get the ID of the customer
        Delete(id);//going to the function for deletion
        //I pulled the data and projected it into the table.
        tbl_ReservationModel = db.GetReservation();
        tbl_reservation.setModel(tbl_ReservationModel);
    }//GEN-LAST:event_btn_ReservationdeleteActionPerformed

    private void btn_ReservationupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ReservationupdateActionPerformed
        // TODO add your handling code here:
        Update();//goes to the function for update.
        btn_Reservationupdate.setEnabled(false);
        Clear();//goes to the cleaning function to delete the entered data after the end of the transaction
    }//GEN-LAST:event_btn_ReservationupdateActionPerformed

    private void btn_ReservationaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ReservationaddActionPerformed
        // TODO add your handling code here:

        //at first, I checked to see if they were all empty. and then I made it mandatory that those entered using Regex be under a certain condition.
        // if the data entered is not like the desired condition, errors are written in the labels.
        Boolean isTC = false;
        for (int i = 0; i < tbl_CustomerModel.getRowCount(); i++) {
            if (tbl_CustomerModel.getValueAt(i, 1).equals(txt_customerTC.getText())) {
                isTC = true;
            }
        }

        if (txt_customerTC.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^[0-9]{11}$").matcher(txt_customerTC.getText());//
            if (!matcher.find()) {
                lbl_customerId.setText("Customer ID Must Be Most 11 Number");
                lbl_customerId.setVisible(true);
                return;
            } else {
                lbl_customerId.setVisible(false);
            }
        }

        if (!isTC) {
            JOptionPane.showMessageDialog(this, "Please enter a valid TC");
            return;
        }

        if (txt_arrivalDate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^\\d{2}/\\d{2}/\\d{4}$").matcher(txt_arrivalDate.getText());//
            if (!matcher.find()) {
                lbl_arrivalDate.setText("Arrival Date Must Be Like 15/06/2006");
                lbl_arrivalDate.setVisible(true);
                return;
            } else {
                lbl_arrivalDate.setVisible(false);
            }
        }
        if (txt_departureDate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Do Not Leave Any Free Space");
            return;
        } else {
            Matcher matcher;
            matcher = Pattern.compile("^\\d{2}/\\d{2}/\\d{4}$").matcher(txt_departureDate.getText());//
            if (!matcher.find()) {
                lbl_departureDate.setText("Departure Date Must Be Like 15/06/2006");
                lbl_departureDate.setVisible(true);
                return;
            } else {
                lbl_departureDate.setVisible(false);
            }
        }

        // after checking the accuracy of the entered data, I pulled the data from the screen by Type.
        //here,I defined a string array and assigned it by separating the room number properties.
        String[] information_of_nummber = (cmbox_room_number.getSelectedItem() + "").split("-");
        int room_Number = 0;
        for (int i = 0; i < tbl_RoomModel.getRowCount(); i++) {
            if (information_of_nummber[0].equals(tbl_RoomModel.getValueAt(i, 2).toString())) {
                room_Number = (int) tbl_RoomModel.getValueAt(i, 0);
            }
        }

        //I pulled the customer ID from the customer table and checked its accuracy with the written id.
        int customerID = 0;
        for (int i = 0; i < tbl_CustomerModel.getRowCount(); i++) {
            if (tbl_CustomerModel.getValueAt(i, 1).equals(txt_customerTC.getText())) {
                customerID = Integer.parseInt(tbl_CustomerModel.getValueAt(i, 0).toString());
            }
        }

        String arrivalDATE = txt_arrivalDate.getText();
        String departureDATE = txt_departureDate.getText();

        //goes function for determines the price.
        int price = PriceCalculator(information_of_nummber, arrivalDATE, departureDATE);
        txt_price.setText(price + "");

        //goes to the insert reservation function.
        InsertReservation(room_Number, customerID, arrivalDATE, departureDATE, price);

        //I pulled the data and projected it into the table.
        tbl_ReservationModel = db.GetReservation();
        tbl_reservation.setModel(tbl_ReservationModel);

        Clear();// goes to the cleaning function to delete the entered data after the end of the transaction
    }//GEN-LAST:event_btn_ReservationaddActionPerformed

    private void tbl_reservationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_reservationMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {// the process of selecting rows from a table with the mouse
            if (tbl_reservation.getSelectedRow() > -1) {
                // I get the ID of the reservation in the selected line
                int row = tbl_reservation.getSelectedRow();
                idSelected = (int) tbl_ReservationModel.getValueAt(row, 0);

                GetDataWihtId(idSelected);// going to the GetDataWithId function to print information from the selected line to textboxes.
                btn_Reservationupdate.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tbl_reservationMouseClicked

    public boolean InsertReservation(int roomID, int customerID, String arrivalDATE, String departureDATE, int price) {
        boolean rvalue = false;
        Connection conn = null;
        try {
            // connect to the database
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password.
            Statement stmt = conn.createStatement();//javasql.statment ı seçtik
            String query = "SELECT RESERVATION_ID FROM RESERVATION ORDER BY RESERVATION_ID DESC";//AUTOMATIC ID COUNT RETRIEVAL PROCESS
            ResultSet rs = stmt.executeQuery(query);//AUTOMATIC ID COUNT RETRIEVAL PROCESS
            rs.next();//first eleman in the table
            int id = rs.getInt(1) + 1;
            //part of adding incoming information to the database
            query = "INSERT INTO RESERVATION VALUES(" + id + "," + roomID + "," + customerID + ",'" + arrivalDATE + "','" + departureDATE + "'," + price + ")";
            stmt.executeUpdate(query);
            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !conn.isClosed()) {

                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }

        return rvalue;
    }

    public boolean Delete(int id) {
        //delete the reservation from the database according to the incoming id
        boolean rvalue = false;
        Connection conn = null;
        try {
            // connect to the database
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password
            Statement stmt = conn.createStatement();
            String query = "DELETE FROM RESERVATION WHERE RESERVATION_ID=" + id;//reservation selection section according to id
            stmt.executeUpdate(query);
            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    public void Clear() {
        //clears all data from the screen when finished processing
        txt_arrivalDate.setText("");
        txt_customerTC.setText("");
        txt_departureDate.setText("");
        txt_price.setText("");
        cmbox_room_number.setSelectedIndex(0);
    }

    public void GetDataWihtId(int id) {//I reflect the table according to the id of the selected row.

        tbl_ReservationModel.setRowCount(0);//we reset the number of rows so that it does not add on top of the previous information
        try {
            // connect to the database
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/UserDB", "sa", "as");//I enter the database location and add the username and password
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM RESERVATION WHERE RESERVATION_ID=" + id;// according to the incoming id, I get the reservation from the database
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                // after identifying the customer, I pull their information according to their type. then I print their information on the screen
                int roomID = rs.getInt("ROOM_ID");
                int customerID = rs.getInt("CUSTOMER_ID");
                String arrivalDate = rs.getString("ARRIVAL_DATE");
                String departureDate = rs.getString("DEPARTURE_DATE");
                int price = rs.getInt("PRICE");

                txt_arrivalDate.setText(arrivalDate);
                for (int i = 0; i < tbl_CustomerModel.getRowCount(); i++) {
                    if (tbl_CustomerModel.getValueAt(i, 0).equals(customerID)) {
                        txt_customerTC.setText(tbl_CustomerModel.getValueAt(i, 1).toString());
                    }
                }

                txt_departureDate.setText(departureDate);
                txt_price.setText(price + "");
                cmbox_room_number.setSelectedIndex((int) (tbl_RoomModel.getValueAt(roomID - 1, 2)) - 1);
            }
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //updating the table
        tbl_ReservationModel = db.GetReservation();
        tbl_reservation.setModel(tbl_ReservationModel);
    }

    public void Update() {

        try {
            //I get the changed information.
            String[] a = (cmbox_room_number.getSelectedItem() + "").split("-");
            int roomID = 0;
            for (int i = 0; i < tbl_RoomModel.getRowCount(); i++) {
                if (a[0].equals(tbl_RoomModel.getValueAt(i, 2).toString())) {
                    roomID = (int) tbl_RoomModel.getValueAt(i, 0);
                }
            }

            int customerID = 0;
            Boolean isTC = false;
            for (int i = 0; i < tbl_CustomerModel.getRowCount(); i++) {
                if (tbl_CustomerModel.getValueAt(i, 1).equals(txt_customerTC.getText())) {
                    customerID = Integer.parseInt(tbl_CustomerModel.getValueAt(i, 0).toString());
                    isTC = true;
                }
            }

            if (!isTC) {
                JOptionPane.showMessageDialog(this, "Please enter a valid TC");
                return;
            }
            String arrivalDATE = txt_arrivalDate.getText();
            String departureDATE = txt_departureDate.getText();
            int price = PriceCalculator(a, arrivalDATE, departureDATE);

            // I update the customer's database information on the selected row along with the changed information
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/USerDB", "sa", "as");//I enter the database location and add the username and password
            Statement stmt = conn.createStatement();
            String query = "UPDATE RESERVATION SET ROOM_ID=" + roomID + ",CUSTOMER_ID=" + customerID + ",ARRIVAL_DATE='" + arrivalDATE + "', DEPARTURE_DATE='" + departureDATE
                    + "', PRICE=" + price + " WHERE RESERVATION_ID=" + idSelected;
            stmt.executeUpdate(query);
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //updating the table
        tbl_ReservationModel = db.GetReservation();
        tbl_reservation.setModel(tbl_ReservationModel);
    }

    public static int PriceCalculator(String a[], String arrival_date, String departure_date) {
        //price setting function
        int SumofRoom_Person_price;
        int room_price = 0;
        int adult_price = 0;
        int kid_price = 0;
        //here, the room price is determined according to the room
        switch (a[1]) {
            case "Junior Suite":
                room_price = 120;
                break;
            case "Dublex Room":
                room_price = 300;
                break;
            case "Studio Room":
                room_price = 150;
                break;
            case "Connecting Room":
                room_price = 250;
                break;
            case "Family Room":
                room_price = 200;
                break;
            case "Corner Room":
                room_price = 150;
                break;
            case "Handicapped Room":
                room_price = 75;
                break;
            case "President Room":
                room_price = 750;
                break;

        }
        //price determination by number of adults
        for (int i = 1; i < Integer.parseInt(a[2]); i++) {

            adult_price += 100;
        }
        //price determination by number of kids
        for (int i = 0; i < Integer.parseInt(a[3]); i++) {

            kid_price += 90;
        }
        //total price of person and room
        SumofRoom_Person_price = room_price + adult_price + kid_price;

        //I reserve arrival and departure dates to determine the price
        String[] arrivaldate = (arrival_date).split("/");
        String[] departuredate = (departure_date).split("/");

        //here, I convert the entire date to a day using the date class
        Date date1 = new Date(Integer.parseInt(arrivaldate[2]), Integer.parseInt(arrivaldate[1]), Integer.parseInt(arrivaldate[0]));
        Date date2 = new Date(Integer.parseInt(departuredate[2]), Integer.parseInt(departuredate[1]), Integer.parseInt(departuredate[0]));

        long date1InMs = date1.getTime();
        long date2InMs = date2.getTime();

        long timeDiff = 0;
        if (date1InMs > date2InMs) {
            timeDiff = date1InMs - date2InMs;
        } else {
            timeDiff = date2InMs - date1InMs;
        }

        int daysDiff = (int) (timeDiff / (1000 * 60 * 60 * 24));

        //Finally,I multiply the number of days spent with the daily price and send the total price
        return SumofRoom_Person_price * daysDiff;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Reservationadd;
    private javax.swing.JButton btn_Reservationdelete;
    private javax.swing.JButton btn_Reservationupdate;
    private javax.swing.JButton btn_back;
    private javax.swing.JComboBox<String> cmbox_room_number;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_Price;
    private javax.swing.JLabel lbl_arrivalDate;
    private javax.swing.JLabel lbl_customerId;
    private javax.swing.JLabel lbl_departureDate;
    private javax.swing.JLabel lbl_roomId;
    private javax.swing.JTable tbl_reservation;
    private javax.swing.JFormattedTextField txt_arrivalDate;
    private javax.swing.JTextField txt_customerTC;
    private javax.swing.JFormattedTextField txt_departureDate;
    private javax.swing.JTextField txt_price;
    private javax.swing.JTextField txt_searchbox;
    // End of variables declaration//GEN-END:variables
}
